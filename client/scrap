
# rescue_from ActiveRecord::RecordNotFound, with: :render_not_found_response
#   rescue_from ActiveRecord::RecordInvalid, with: :render_unprocessable_entity_error

#   def render_not_found_response
#     render json: {error: "Record Not Found"}, status: :not_found 
#   end

#   def render_unprocessable_entity_error
#     render json: {errors: exception.record.errors.full_messages}, status: :unprocessable_entity
#   end


    
# const [book, setBook] = useState(props.book)

# const readBook = (event) => {
#     console.log(event.target.id)
#    const id = parseInt(event.target.id)
#    if(window.confirm("Nice Choice."))
#    fetch(`http://localhost:3000/books/${id}`, {
#        method: "PATCH",
#        headers: {
#        "Content-type": "application/json"
#        },
#        body: JSON.stringify({read: true})
#    })
#    .then(response => response.json())
#    .then(book => setBook(book))
# }




# def total_books
#         self.books.size
#     end
    
#     def self.most_books
#          includes(:books).all.max_by {|author| author.books.length}
#     end

#     def self.least_books
#         includes(:books).all.min_by {|author| author.books.length}
#     end

#     def rating
#         self.books.map{|book| book.rating}
#     end

#     def total_rating
#        ( self.books.map{|book| book.rating}.sum).to_f
#     end
    

#     def average_rating
#        ( total_rating / self.books.map{|book| book.rating}.count).to_f
#     end

#     def self.highest_rating_author
#        high_rating = self.all.map{|author| author.average_rating}.max
#        self.all.filter{|author| author.average_rating == high_rating}.map {|author| author.full_name}
#     end

#     def self.lowest_rating_author
#         low_rating = self.all.map{|author| author.average_rating}.min
#         self.all.filter{|author| author.average_rating == low_rating}.map {|author| author.full_name}
#     end

#     def highest_rated_book
#         high_rating = self.books.map{ |book| book.rating}.max 
#         self.books.filter{|book| book.rating == high_rating}.map {|book| book.title}
#     end

#     def lowest_rated_book
#         low_rating = self.books.map {|book| book.rating}.min
#         self.books.filter{|book| book.rating == low_rating}.map {|book| book.title}
#     end

#     def self.all_books_with_classic_genre
#         self.all.filter{|book| book.genre == "Classic"}
#     end


For Author.rb 
    # def self.most_books
    #     includes(:books).all.max_by{|author| author.books.length}
    # end

    # def self.least_books
    #     includes(:books).all.min_by{|author| author.books.length}
    # end

    # def total_rating
    #    (self.books.map{|book| book.rating}.sum).to_f
    # end

    # def average_rating
    #     ( total_rating / self.books.map{|book| book.rating}.count).to_f
    # end

    # def self.highest_rated_author
    #     highest_rating = self.all.map{|author| author.average_rating}.max 
    #     self.all.filter{|author| author.average_rating == highest_rating}.map{|author| author.name}
    # end

    # def self.lowest_rated_author
    # end

For Book.rb 

# def self.books_with_classic_genre
#         self.where({genre: "Classic"})
#     end

#     def self.books_with_mystery_genre
#         self.where({genre: "Mystery"}).map{|book| book.title}
#     end

#     def self.books_with_mythology_genre
#         self.where({genre: "Mythology"}).map{|book| book.title}
#     end

#     def self.books_with_highest_rating
#        self.where({rating: 10}).map{|book| book.title}
#     end

#     def self.books_with_the_lowest_rating
#         self.where({rating: 1}).map{|book| book.title}
#      end

